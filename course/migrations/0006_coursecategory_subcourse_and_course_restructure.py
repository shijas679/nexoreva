# Generated by Django 5.2 on 2025-08-08 19:55

import django.db.models.deletion
from django.db import migrations, models


def create_course_categories_and_subcourses(apps, schema_editor):
    """Create CourseCategory and SubCourse objects from existing Course data"""
    Course = apps.get_model('course', 'Course')
    CourseCategory = apps.get_model('course', 'CourseCategory')
    SubCourse = apps.get_model('course', 'SubCourse')
    
    # Get all unique course names and sub_courses from existing data
    existing_courses = Course.objects.all()
    
    for course in existing_courses:
        # Create or get course category
        course_category, created = CourseCategory.objects.get_or_create(name=course.name)
        
        # Create sub course if it exists
        if course.sub_column and course.sub_column.strip():
            sub_course, created = SubCourse.objects.get_or_create(
                course_category=course_category,
                name=course.sub_column
            )


def migrate_course_data(apps, schema_editor):
    """Migrate existing course data to use new foreign key relationships"""
    Course = apps.get_model('course', 'Course')
    CourseCategory = apps.get_model('course', 'CourseCategory')
    SubCourse = apps.get_model('course', 'SubCourse')
    
    for course in Course.objects.all():
        # Get the course category
        try:
            course_category = CourseCategory.objects.get(name=course.name)
            course.name_new = course_category
            
            # Get the sub course if it exists
            if course.sub_column and course.sub_column.strip():
                try:
                    sub_course = SubCourse.objects.get(
                        course_category=course_category,
                        name=course.sub_column
                    )
                    course.sub_column_new = sub_course
                except SubCourse.DoesNotExist:
                    pass
            
            course.save()
        except CourseCategory.DoesNotExist:
            pass


def reverse_migrate_course_data(apps, schema_editor):
    """Reverse the data migration"""
    CourseCategory = apps.get_model('course', 'CourseCategory')
    SubCourse = apps.get_model('course', 'SubCourse')
    
    # Delete all created objects
    SubCourse.objects.all().delete()
    CourseCategory.objects.all().delete()


class Migration(migrations.Migration):

    dependencies = [
        ('course', '0005_alter_course_name_alter_course_sub_column'),
    ]

    operations = [
        # Step 1: Create new models
        migrations.CreateModel(
            name='CourseCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name_plural': 'Course Categories',
            },
        ),
        migrations.CreateModel(
            name='SubCourse',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('course_category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sub_courses', to='course.coursecategory')),
            ],
            options={
                'verbose_name_plural': 'Sub Courses',
                'unique_together': {('course_category', 'name')},
            },
        ),
        
        # Step 2: Migrate existing data to new models
        migrations.RunPython(create_course_categories_and_subcourses, reverse_migrate_course_data),
        
        # Step 3: Add new foreign key fields (temporarily nullable)
        migrations.AddField(
            model_name='course',
            name='name_new',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='courses', to='course.coursecategory'),
        ),
        migrations.AddField(
            model_name='course',
            name='sub_column_new',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='courses', to='course.subcourse'),
        ),
        
        # Step 4: Migrate data to new fields
        migrations.RunPython(migrate_course_data, reverse_migrate_course_data),
        
        # Step 5: Remove old fields
        migrations.RemoveField(
            model_name='course',
            name='name',
        ),
        migrations.RemoveField(
            model_name='course',
            name='sub_column',
        ),
        
        # Step 6: Rename new fields to original names
        migrations.RenameField(
            model_name='course',
            old_name='name_new',
            new_name='name',
        ),
        migrations.RenameField(
            model_name='course',
            old_name='sub_column_new',
            new_name='sub_column',
        ),
        
        # Step 7: Make fields non-nullable (except sub_column which can be blank)
        migrations.AlterField(
            model_name='course',
            name='name',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='courses', to='course.coursecategory'),
        ),
    ]
